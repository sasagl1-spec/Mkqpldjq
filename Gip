import asyncio
import random
from telethon import TelegramClient
from telethon.tl.types import Channel, Chat

# Добавляем импорт loader
from hikka import loader

# Настройки
INTERVAL = 60  # Интервал в секундах (по умолчанию 60)
TARGET_BOT = "iris_black_bot"  # Целевой бот (без @)

class RandomDotSenderMod(loader.Module):
    """Модуль для отправки точек в случайные чаты с ботом"""
    
    strings = {"name": "RandomDotSender"}
    
    def __init__(self):
        self.task = None
        self.interval = INTERVAL

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def startdot(self, message):
        """Запустить отправку точек"""
        if self.task and not self.task.done():
            await message.edit("❌ Уже запущено!")
            return

        self.task = asyncio.create_task(self.send_loop())
        await message.edit("✅ Рассылка запущена!")

    @loader.command()
    async def stopdot(self, message):
        """Остановить отправку точек"""
        if not self.task or self.task.done():
            await message.edit("❌ Не запущено!")
            return

        self.task.cancel()
        self.task = None
        await message.edit("✅ Рассылка остановлена!")

    @loader.command()
    async def setinterval(self, message):
        """Установить интервал (в секундах)"""
        try:
            args = message.text.split()
            if len(args) < 2:
                await message.edit("❌ Использование: .setinterval <секунды>")
                return
                
            self.interval = int(args[1])
            await message.edit(f"✅ Интервал установлен: {self.interval} сек")
        except ValueError:
            await message.edit("❌ Укажите число секунд")

    async def send_loop(self):
        while True:
            try:
                # Получаем все диалоги
                dialogs = await self.client.get_dialogs()
                valid_chats = []

                for dialog in dialogs:
                    entity = dialog.entity
                    # Проверяем тип чата и наличие бота
                    if isinstance(entity, (Channel, Chat)):
                        try:
                            participants = await self.client.get_participants(entity)
                            bot_present = any(
                                user.bot and user.username == TARGET_BOT 
                                for user in participants
                            )
                            if bot_present:
                                valid_chats.append(entity)
                        except Exception as e:
                            print(f"Ошибка проверки чата {entity.id}: {e}")
                            continue

                if valid_chats:
                    # Выбираем случайный чат
                    random_chat = random.choice(valid_chats)
                    await self.client.send_message(random_chat, ".")
                    print(f"Отправлена точка в чат: {getattr(random_chat, 'title', 'Unknown')}")
                else:
                    print("❌ Чаты с ботом не найдены")

            except Exception as e:
                print(f"Критическая ошибка: {e}")

            await asyncio.sleep(self.interval)

    async def on_unload(self):
        if self.task and not self.task.done():
            self.task.cancel()
