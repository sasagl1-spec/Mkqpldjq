# Telegram –∫–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: https://t.me/modulesTheHika
# –°–æ–∑–¥–∞—Ç–µ–ª—å: @vipqlkxn

from hikka import loader, utils
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.functions.contacts import ResolveUsernameRequest
import asyncio
import re

@loader.tds
class GramPiarAutoMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è @gram_piarbot"""
    strings = {"name": "GramPiarAuto"}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.bot_username = "gram_piarbot"

    async def send_to_bot(self, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            bot_entity = await self._client(ResolveUsernameRequest(self.bot_username))
            bot_input = await self._client.get_input_entity(bot_entity.peer)
            
            await self._client(SendMessageRequest(
                peer=bot_input,
                message=message_text,
                no_webpage=True
            ))
            
            await asyncio.sleep(2)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if not msg.out:
                    return msg.text
            return None
        except Exception:
            return None

    @loader.command()
    async def piarstartcmd(self, message):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ @gram_piarbot - .piarstart"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            start_msg = await self.send_to_bot("/start")
            
            if not start_msg:
                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await asyncio.sleep(1)
            menu_text = await self.send_to_bot("–ú–µ–Ω—é")
            
            if not menu_text:
                await utils.answer(message, "‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            tasks_completed = 0
            archive_links = []
            
            # –ü–æ–∏—Å–∫ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
            if "–∑–∞–¥–∞–Ω–∏—è" in menu_text.lower() or "tasks" in menu_text.lower():
                await self.send_to_bot("–ó–∞–¥–∞–Ω–∏—è")
                await asyncio.sleep(2)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
                tasks_response = await self.send_to_bot("1")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                
                if tasks_response:
                    # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    task_pattern = r'(https?://t\.me/\S+|@\w+)'
                    found_links = re.findall(task_pattern, tasks_response)
                    
                    for link in found_links:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è/–≤—Å—Ç—É–ø–∞–µ–º)
                        await self.send_to_bot(link)
                        await asyncio.sleep(3)
                        
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        confirm_msg = await self.send_to_bot("–ì–æ—Ç–æ–≤–æ")
                        if confirm_msg and ("–ø—Ä–æ–≤–µ—Ä–∫–∞" in confirm_msg.lower() or "verify" in confirm_msg.lower()):
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                            await self.send_to_bot("‚úÖ")
                            await asyncio.sleep(2)
                            
                            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                            archive_links.append(link)
                            tasks_completed += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
            if archive_links:
                archive_text = "üì¶ –ê—Ä—Ö–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n" + "\n".join(archive_links)
                await utils.answer(message, f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {tasks_completed}\n\n{archive_text}")
            else:
                await utils.answer(message, "‚ùå –ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def piarscancmd(self, message):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π - .piarscan"""
        try:
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞–Ω–∏–π
            await self.send_to_bot("/start")
            await asyncio.sleep(1)
            
            scan_result = await self.send_to_bot("–ó–∞–¥–∞–Ω–∏—è")
            if not scan_result:
                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            task_count = scan_result.count("–∑–∞–¥–∞–Ω–∏–µ") + scan_result.count("task")
            channel_count = scan_result.count("t.me") + scan_result.count("@")
            
            await utils.answer(
                message,
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è @gram_piarbot:\n\n"
                f"üìã –ó–∞–¥–∞–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {task_count}\n"
                f"üì¢ –ö–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤: {channel_count}\n"
                f"üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n\n{scan_result[:400]}..."
            )

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    @loader.command()
    async def piarstopcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ - .piarstop"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await utils.answer(message, "‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
