# Telegram –∫–∞–Ω–∞–ª –º–æ–¥—É–ª–µ–π: https://t.me/modulesTheHika
# –°–æ–∑–¥–∞—Ç–µ–ª—å: @vipqlkxn

from hikka import loader, utils
from telethon.tl.functions.messages import SendMessageRequest
from telethon.tl.functions.contacts import ResolveUsernameRequest
import asyncio
import re

@loader.tds
class GramPiarAutoMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è @gram_piarbot —Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–µ–π"""
    strings = {"name": "GramPiarAuto"}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.bot_username = "gram_piarbot"
        self.archive = []

    async def send_to_bot(self, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            bot_entity = await self._client(ResolveUsernameRequest(self.bot_username))
            bot_input = await self._client.get_input_entity(bot_entity.peer)
            
            await self._client(SendMessageRequest(
                peer=bot_input,
                message=message_text,
                no_webpage=True
            ))
            
            await asyncio.sleep(2)
            async for msg in self._client.iter_messages(bot_input, limit=1):
                if not msg.out:
                    return msg.text
            return None
        except Exception:
            return None

    async def parse_tasks(self, response_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        tasks = []
        lines = response_text.split('\n')
        
        for i, line in enumerate(lines):
            if ("‚úÖ | –ü–æ–¥–ø–∏—Å–∞–Ω" in line or "‚úÖ | Subscribed" in line) and "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" in lines[i+1]:
                # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                for j in range(max(0, i-3), i):
                    if "t.me/" in lines[j] or "@" in lines[j]:
                        task_link = lines[j].strip()
                        tasks.append({
                            'link': task_link,
                            'check_line': i+1
                        })
                        break
        return tasks

    @loader.command()
    async def piarautocmd(self, message):
        """–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ - .piarauto"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            start_msg = await self.send_to_bot("/start")
            await asyncio.sleep(1)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∑–∞–¥–∞–Ω–∏—è
            tasks_msg = await self.send_to_bot("–ó–∞–¥–∞–Ω–∏—è")
            if not tasks_msg:
                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
                return

            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞–Ω–∏—è
            tasks = await self.parse_tasks(tasks_msg)
            if not tasks:
                await utils.answer(message, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            completed = 0
            failed = 0

            for task in tasks:
                try:
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
                    await self.send_to_bot(task['link'])
                    await asyncio.sleep(3)
                    
                    # –ù–∞–∂–∏–º–∞–µ–º "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
                    check_result = await self.send_to_bot("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
                    
                    if check_result and ("–ø—Ä–æ–≤–µ—Ä–∫–∞" in check_result.lower() or "verify" in check_result.lower()):
                        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        self.archive.append(task['link'])
                        completed += 1
                        await asyncio.sleep(2)
                    else:
                        failed += 1
                        
                except Exception:
                    failed += 1
                    continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            archive_text = "\n".join(self.archive[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            await utils.answer(
                message,
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {completed}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed}\n\n"
                f"üì¶ –ê—Ä—Ö–∏–≤ ({len(self.archive)}):\n{archive_text}"
            )

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def piararchcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤ - .piararch"""
        if not self.archive:
            await utils.answer(message, "üì¶ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
            return
        
        archive_text = "\n".join(self.archive)
        await utils.answer(message, f"üì¶ –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞–Ω–∏–π ({len(self.archive)}):\n\n{archive_text}")

    @loader.command()
    async def piarclearcmd(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤ - .piarclear"""
        self.archive.clear()
        await utils.answer(message, "üóëÔ∏è –ê—Ä—Ö–∏–≤ –æ—á–∏—â–µ–Ω")

    @loader.command()
    async def piarscancmd(self, message):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è - .piarscan"""
        try:
            tasks_msg = await self.send_to_bot("–ó–∞–¥–∞–Ω–∏—è")
            if not tasks_msg:
                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
                return

            tasks = await self.parse_tasks(tasks_msg)
            await utils.answer(
                message,
                f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}\n"
                f"üìã –ü—Ä–∏–º–µ—Ä—ã:\n" + "\n".join([t['link'] for t in tasks[:3]])
            )
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
