from .. import loader, utils
import asyncio
from telethon import events

@loader.tds
class AutoCommentMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –Ω–æ–≤—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏"""
    strings = {"name": "AutoComment"}

    async def client_ready(self, client, db):
        self._client = client
        self.db = db
        self.comment_text = "–ú–Ω–µ –≤—Å–µ–≥–æ 13..."
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.watched_chats = []
        
        # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self._client.add_event_handler(
            self.on_new_message,
            events.NewMessage(outgoing=False)
        )

    async def on_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
            if not event.is_channel or event.is_private:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ—Å—Ç (–∞ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
            if event.message.reply_to_msg_id:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            chat_id = event.chat_id
            if chat_id not in self.watched_chats:
                return
                
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            await asyncio.sleep(5)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await event.message.reply(self.comment_text)
            print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —á–∞—Ç–µ {chat_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def acaddcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = message.chat_id
        if chat_id not in self.watched_chats:
            self.watched_chats.append(chat_id)
            await utils.answer(message, "‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        else:
            await utils.answer(message, "‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")

    async def acremcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = message.chat_id
        if chat_id in self.watched_chats:
            self.watched_chats.remove(chat_id)
            await utils.answer(message, "‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        else:
            await utils.answer(message, "‚ö†Ô∏è –≠—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")

    async def aclistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤"""
        if not self.watched_chats:
            await utils.answer(message, "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç")
            return
            
        response = "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:\n"
        for chat_id in self.watched_chats:
            try:
                chat = await self._client.get_entity(chat_id)
                response += f"‚Ä¢ {chat.title}\n"
            except:
                response += f"‚Ä¢ {chat_id}\n"
                
        await utils.answer(message, response)

    async def actextcmd(self, message):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: " + self.comment_text)
            return
            
        self.comment_text = args
        await utils.answer(message, "‚úÖ –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω")

    async def unload(self):
        """–ü—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        self._client.remove_event_handler(self.on_new_message)
